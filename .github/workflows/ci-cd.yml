name: Continuous Integration and Deployment

on:
  pull_request:
    branches: [ develop ]

permissions:
  id-token: write
  contents: read

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Make .env file
      run: |
        cd ./back
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
        echo "OPENAI_ORG_ID=${{ secrets.OPENAI_ORG_ID }}" >> .env
        echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
        echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
        echo "DB_USER=${{ secrets.DB_USER }}" >> .env
        echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
        echo "DB_NAME=OPTITASK" >> .env
        echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
        echo "JWT_EXPIRES_IN=1d" >> .env

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to ECR
      run: |
        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

    - name: Build and push Docker images (backend)
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./back/Dockerfile
        push: true
        tags: ${{ secrets.ECR_REGISTRY }}/optitask-backend:backend

    - name: Build and push Docker images (frontend)
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./front/Dockerfile
        push: true
        tags: ${{ secrets.ECR_REGISTRY }}/optitask-frontend:frontend

  # cleanup-images:
  #   runs-on: ubuntu-latest
  #   needs: build-and-push
  #   steps:
  #   - name: Clean up old ECR images
  #     run: |
  #       ECR_REGISTRY=${{ secrets.ECR_REGISTRY }}
  #       BACKEND_REPOSITORY=optitask-backend
  #       FRONTEND_REPOSITORY=optitask-frontend

  #       echo "Cleaning up old backend images"
  #       image_digests=$(aws ecr list-images --repository-name $BACKEND_REPOSITORY --query 'imageIds[*].imageDigest' --output text)

  #       image_count=$(echo "$image_digests" | wc -w)

  #       if [ "$image_count" -gt 2 ]; then
  #         images_to_keep=$(echo "$image_digests" | tail -n 2)
  #         for digest in $image_digests; do
  #           if [[ ! $images_to_keep =~ $digest ]]; then
  #             aws ecr batch-delete-image --repository-name $BACKEND_REPOSITORY --image-ids imageDigest=$digest
  #           fi
  #         done
  #       else
  #         echo "Not enough backend images to clean up"
  #       fi
  
  #       echo "Cleaning up old frontend images"
  #       image_digests=$(aws ecr list-images --repository-name $FRONTEND_REPOSITORY --query 'imageIds[*].imageDigest' --output text)

  #       image_count=$(echo "$image_digests" | wc -w)

  #       if [ "$image_count" -gt 2 ]; then
  #         images_to_keep=$(echo "$image_digests" | tail -n 2)
  #         for digest in $image_digests; do
  #           if [[ ! $images_to_keep =~ $digest ]]; then
  #             aws ecr batch-delete-image --repository-name $FRONTEND_REPOSITORY --image-ids imageDigest=$digest
  #           fi
  #         done
  #       else
  #         echo "Not enough frontend images to clean up"
  #       fi

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
    - name: Deploy to EC2
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        HOST: ${{ secrets.SSH_HOST }}
        USER: ${{ secrets.SSH_USER }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
      run: |
        eval $(ssh-agent -s)
        ssh-add - <<< "${SSH_PRIVATE_KEY}"
        export SSH_ARGS="-o StrictHostKeyChecking=no"
        
        # SSH to the EC2 instance and pull the latest Docker image and restart the container
        ssh $SSH_ARGS $USER@$HOST << 'EOF'
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
        	docker-compose -f ~/docker-compose.yml pull
        	docker-compose -f ~/docker-compose.yml up -d
        EOF
